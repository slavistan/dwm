#!/usr/bin/env sh

# Separator and command prefix, as defined in dwm.c:fakesignal()
SEP='###'
PREFIX='#!'

usage() {
	cat <<EOF
dwm window swallowing command-line interface. Usage:

	dwmswallow SWALLOWER [-c CLASS] [-i INSTANCE] [-t TITLE]
		Queue window SWALLOWER to swallow the next future window whose attributes
		match the CLASS name, INSTANCE name and window TITLE filters using basic
		string-matching. An omitted filter will match anything.

	dwmswallow SWALLOWER -d
		Delete any queued swallows for window SWALLOWER. Inverse of above signature.

	dwmswallow SWALLOWER SWALLOWEE
		Perform immediate swallow of window SWALLOWEE by window SWALLOWER.

	dwmswallow SWALLOWEE -s
		Unswallow window SWALLOWEE. Inverse of the above signature. Top-level windows
		only.

	dwmswallow -h
		Show this usage information.
EOF
}

# Determine number of leading positional arguments
arg1="$1" # save for later
arg2="$2" # save for later
num_pargs=0
while :; do
	case "$1" in
	-*|"") break ;;
	*) num_pargs=$((num_pargs + 1)); shift ;;
	esac
done

case "$num_pargs" in
1)
	widswer="$arg1"
	if [ "$1" = "-d" ] && [ "$#" -eq 1 ]; then
		xsetroot -name "${PREFIX}swalunreg$SEP$widswer" 
	elif [ "$1" = "-s" ] && [ "$#" -eq 1 ]; then
		widswee="$arg1"
		xsetroot -name "${PREFIX}swalstop$SEP$widswee" 
	else
		while :; do
			case "$1" in
			-c) [ -n "$2" ] && { class="$2"; shift 2; } || { usage >&2; exit 1; } ;;
			-i) [ -n "$2" ] && { instance="$2"; shift 2; } || { usage >&2; exit 1; } ;;
			-t) [ -n "$2" ] && { title="$2"; shift 2; } || { usage >&2; exit 1; } ;;
			"") break ;;
			*)	usage >&2; exit 1 ;;
			esac
		done
		widswer="$arg1"
		xsetroot -name "${PREFIX}swalreg$SEP$widswer$SEP$class$SEP$class$SEP$instance$SEP$title"
	fi
	;;
2)
	widswer="$arg1"
	widswee="$arg2"
	xsetroot -name "${PREFIX}swal$SEP$widswer$SEP$widswee"
	;;
*)
	if [ "$arg1" = "-h" ] && [ $# -eq 1 ]; then
		usage
	else
		usage >&2
		exit 1
	fi
esac
